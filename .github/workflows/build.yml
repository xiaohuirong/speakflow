name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    permissions:
      id-token: write
      contents: read
      attestations: write

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-24.04
            c_compiler: gcc
            cpp_compiler: g++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: ubuntu-24.04
            c_compiler: cl
            
    steps:
    - uses: actions/checkout@v4

    - name: Init submodule
      run: |
        git submodule init
        git submodule update --init --recursive
    
    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
      
    - name: Prepare MSVC
      if: runner.os == 'Windows'
      uses: bus1/cabuild/action/msdevshell@v1
      with:
        architecture: x64

    - uses: MinoruSekine/setup-scoop@v4.0.1
      if: runner.os == 'Windows'
      with:
        buckets: extras
        # apps: doxygen plantuml

    - uses: Jimver/cuda-toolkit@master
      if: runner.os == 'Windows'
      id: cuda-toolkit
      with:
        cuda: '12.8.0'

    - name: Install build tools on Linux
      if: runner.os == 'Linux'
      run: |
        sudo apt install make cmake nlohmann-json3-dev libsdl2-dev nvidia-cuda-toolkit libcurl4-openssl-dev
        
    - name: Install Qt6
      uses: jurplel/install-qt-action@v4
      with:
        modules: 'qtwebengine qtwebchannel qtpositioning'
        version: '6.9.0'

    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3

    - name: Prepare Build
      run: cmake -B build -S . -DCMAKE_BUILD_TYPE=Release -DGGML_CUDA=1
      
    - name: Run Build
      run: make -C build
      
    - name: windeployqt
      if: runner.os == 'Windows'
      run: |
        mkdir target
        cp ./build/speakflow.exe target/
        windeployqt ./target/speakflow.exe

    - name: copy to target
      if: runner.os == 'Linux'
      run: |
        mkdir target
        cp ./build/speakflow target/

    - uses: actions/upload-artifact@v4
      with:
        name: 'target_${{ matrix.os }}'
        path: './target/'
