name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    permissions:
      id-token: write
      contents: read
      attestations: write

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-24.04
            c_compiler: gcc
            cpp_compiler: g++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: ubuntu-24.04
            c_compiler: cl
            
    steps:
    - uses: actions/checkout@v4

    - name: Init submodule
      run: |
        git submodule init
        git submodule update --init --recursive
    
    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
      
    - name: Prepare MSVC
      if: runner.os == 'Windows'
      uses: bus1/cabuild/action/msdevshell@v1
      with:
        architecture: x64

    - name: MYSYS2
      if: runner.os == 'Windows'
      run: |
        pacman -S mingw-w64-x86_64-zlib mingw-w64-x86_64-nlohmann-json mingw-w64-x86_64-curl mingw-w64-x86_64-openssl mingw-w64-x86_64-SDL2

    # - uses: MinoruSekine/setup-scoop@v4.0.1
    #   if: runner.os == 'Windows'
    #   with:
    #     buckets: extras
    #     apps: zlib 

    - uses: Jimver/cuda-toolkit@master
      if: runner.os == 'Windows'
      id: cuda-toolkit
      with:
        cuda: '12.8.0'

    - name: Install build tools on Linux
      if: runner.os == 'Linux'
      run: |
        sudo apt install make cmake nlohmann-json3-dev libsdl2-dev nvidia-cuda-toolkit libcurl4-openssl-dev

    - name: Set up GCC
      if: runner.os == 'Linux'
      uses: egor-tensin/setup-gcc@v1
      with:
        version: latest
        platform: x64
        
    - name: Install Qt6
      uses: jurplel/install-qt-action@v4
      with:
        modules: 'qtwebengine qtwebchannel qtpositioning'
        version: '6.9.0'

    # - name: Setup tmate session
    #   uses: mxschmitt/action-tmate@v3

    - name: Prepare Build
      run: cmake -B build -S . -DCMAKE_BUILD_TYPE=Release -DGGML_CUDA=1

    - name: Configure CMake on Linux
      if: runner.os == 'Linux'
      run: |
        cmake -B build \
              -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
              -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -S ${{ github.workspace }}

    - name: Configure CMake on Windows
      if: runner.os == 'Windows'
      run: |
        cmake -B build `
              -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} `
              -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} `
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} `
              -DZLIB_LIBRARY="C:/msys64/mingw64/lib/libz.dll.a" `
              -DZLIB_INCLUDE_DIR="C:/msys64/mingw64/include" `
              -DOPENSSL_INCLUDE_DIR="C:/msys64/mingw64/include" `
              -DOPENSSL_LIBRARIES="C:/msys64/mingw64/lib" `
              -S ${{ github.workspace }}
      
    - name: Run Build
      run: cmake --build build
      
    - name: windeployqt
      if: runner.os == 'Windows'
      run: |
        mkdir target
        windeployqt ./build/speakflow.exe
        cp ./build target/ -r

    - name: copy to target
      if: runner.os == 'Linux'
      run: |
        mkdir target
        cp ./build target/ -r

    - uses: actions/upload-artifact@v4
      with:
        name: 'target_${{ matrix.os }}'
        path: './target/'
